#!/bin/bash

# =============================================================================
# === SSH - GPG
# =============================================================================
if [ ! "$(ssh-agent)" ]; then
  eval "$(ssh-agent -s)" && "ssh-add ~/.ssh/id_rsa"
fi

# if [ ! "$(which keychain)" ]; then
#    eval "$(which keychain --eval --agents ssh id_rsa)"
# fi

alias ls-gpg-keys="gpg -K --keyid-format long --with-colons --with-fingerprint"
alias cp-ssh-pub-key='xclip -sel clip < ~/.ssh/id_rsa.pub'

# =============================================================================
# === CONSOLE - Common Helpers
# =============================================================================
export savealias='alias > ~/.aliasrc'
# open() { kde-open "$@" > /dev/null 2>&1 ;}  # open with default GUI program
open() { xdg-open "$@" > /dev/null 2>&1 ;}  # open with default GUI program
# tip of the day
alias \?='echo "Did you know that:"; whatis $(ls /bin | shuf -n 1)'
alias rg="ranger"
alias xs='xstow'
alias algrep='cat ~/.alias* | grep'
alias cl='clear'
alias xx='exit'
alias rs='reset'
alias del='gvfs-trash'
alias delist='gvfs-ls trash://'
alias delall='gvfs-trash --empty'
mkdircd() { "mkdir -p -v $1" ; "cd $1 || return" ; "ls -l ../" ; } # create folder then cd into it
alias shred='shred -u -vzn 0'
alias rld='source '
alias rld-aliasrc='source ~/.aliasrc'
alias rld-zshrc='source ~/.zshrc'
alias rld-bashrc='source ~/.bashrc'
alias rld-vimrc='source ~/.vimrc'
alias 'nah'='echo "shutdown (ctrl-c to abort)?" && read && sudo shutdown 0' # Done with work?
alias npmi='npm install --no-optional' #to avoid fsevent error

# =============================================================================
# === TIME - DATE - WEATHER - CAL
# =============================================================================
alias weather='curl http://wttr.in/athens'
alias weather-malta='curl http://wttr.in/malta'
alias date-time='sudo dpkg-reconfigure tzdata'

# =============================================================================
# === SUBSTITUTION
# =============================================================================
# DESC: mainly existing commands
alias visudo='sudo EDITOR="$EDITOR" visudo'
alias mkpasswd='mkpasswd --method=SHA-512'
alias df='df -hT --total'  # human readable, print filetype, and total
alias du='du -d1 -h'  # max depth, human readable
alias info='info --vi-keys' # GNU info act like man command
alias emacs='emacs -nw'  # cli mode
alias mkdir='mkdir -p -v'  # create if not exist, verbose
alias cp='cp -aiv'  # cp prompt confirmation
alias nano='nano -c -$'  # word wrapping
alias wget='wget -N -c'  # continues/resumes
alias w3m='w3m -num'  # w3m web browser with line number
alias sr='sr -browser=$BROWSERCLI'  # open in cli browser
alias srf='surfraw -browser=$BROWSER'  # open in gui browser
# youtube-viewer: -C=color, -f=fullscreen, -1=1080p, number of results
alias youtube-viewer='youtube-viewer -C -f -1 --results=20 --video-player=vlc'
alias ytv='youtube-viewer'
alias vim='nvim'

# =============================================================================
# === HARDWARE - SYSTEM INFO - NET TOOLS
# =============================================================================
# TITLE: System Info
# https://www.cyberciti.biz/faq/linux-tell-which-graphics-vga-card-installed/
alias ls-hdw='sudo lspci -v | less'
alias ls-board="sudo dmidecode -t baseboard | grep -i 'Product'" # inxi -M
alias ls-sound-card="lspci -vnn | grep -iA 10 --color 'audio'" # inxi -G
alias ls-gl="glxinfo | grep OpenGL"
alias ls-video-card='lspci -vnn | grep VGA -A 12'
alias ls-video='sudo lshw -C video'
ls-sound() { arecord -L && arecord -l && cat /proc/asound/pcm; } #List audio capture card/mic
ls-distro() { uname -a && lsb_release -a; }
ls-connectip() {
    echo "----------------------- Connected Devices -----------------------"
    nmap -sn "$(netstat -rn | awk 'FNR == 3 {print $2}')/24"
    echo "-----------------------------------------------------------------"
}
alias lsblk='sudo lsblk -o "KNAME,HOTPLUG,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID,MODEL,SERIAL"'
alias ls-sched="echo 'Default scheduler:' cat /sys/block/sda/queue/scheduler"
alias nmap-vulscan='sudo nmap --script nmap-vulners,vulscan --script-args vulscandb=scipvuldb.csv -sV -PN -D 10.0.0.1,10.0.0.2,10.0.0.4'
alias aria-torr='sudo time aria2c --seed-time=0'
alias aria-http='sudo time aria2c -x2'
alias aria-file='sudo time aria2c -i'
alias ls-wifi-channel='sudo iwlist wlp2s0 scan | grep Frequency | sort | uniq -c | sort -n'

# =============================================================================
# === MAINTENANCE - SERVICES
# =============================================================================
# TITLE: Void xbps package manager
# https://wiki.voidlinux.org/Rosetta_stone
alias xxq="sudo xbps-query -Rs" #query for packages matching pkgname/version/description with specified pattern(s) (search mode)
alias xxql="sudo xbps-query -l" #query the list of installed packages
alias xxqo="sudo xbps-query -O" #query the list of installed package orphans
alias xxqh="sudo xbps-query -H" #query the list of packages on hold (won't be upgraded automatically)
alias xxqm="sudo xbps-query -m" #query the list of installed packages that were installed manually (not as dependencies)
alias xxi="sudo xbps-install"   #install a package
alias xxis="sudo xbps-install -S" #synchronize remote repository index files
alias xxr="sudo xbps-remove"    #remove a package
alias xxrd="sudo xbps-remove -R" #recursively remove unneeded dependencies that were installed by the target package
alias xxro="sudo xbps-remove -o" #remove package orphans
alias xxroO="sudo xbps-remove -oO"  #remove package orphans and clear the cache
alias xxus="sudo xbps-install -Suv" #update all packages (also known as dist-upgrade in Debian/Ubuntu)

# TITLE: Debian apt package manager - ucaresystem-core - services
alias uc="sudo ucaresystem-core"
alias apu="sudo apt update && sudo apt upgrade"
alias apd="sudo apt update"
alias apl="sudo apt list --upgradable"
alias apg="sudo apt upgrade"
alias api="sudo apt install"
alias apc="sudo apt autoremove && sudo apt-get clean"
alias apr="sudo apt remove --auto-remove"
alias app="sudo apt purge --auto-remove -y"
alias ase="sudo apt search"
alias asen="sudo apt-cache -n search"
alias aso="sudo apt-cache show"
alias ls-deb-repos='grep -Po "(?<=^deb\s).*?(?=#|$)" /etc/apt/{sources.list,sources.list.d/*.list} | while read ENTRY ; do echo $ENTRY; done' # Active deb Repos

# TITLE: Systemd and services
alias s-start="sudo systemctl start"
alias s-stop="sudo systemctl stop"
alias s-edit="sudo systemctl edit --full"
alias s-time="systemd-analyze time"
alias s-blame="sudo systemd-analyze blame | head -20"
alias s-restart="sudo systemctl restart"
alias s-status="sudo systemctl status"
alias s-enable="sudo systemctl enable"
alias s-disable="sudo systemctl disable"
alias s-reload="sudo systemctl reload"
alias s-ls-unit-files="systemctl list-unit-files --type=service"
alias s-ls-units="sudo systemctl list-units"
alias s-ls-units-f="sudo systemctl list-units |grep failed"
alias s-ls-deps="sudo systemctl list-dependencies"

# =============================================================================
# === SETUP - CONFIG
# =============================================================================
# TITLE: Set Default Programs
# DESC: Choose the first in the array of installed programs
#       and use it as the default.
# @function: find alternative apps if it is installed on your system
find_alt() { for i; do which "$i" >/dev/null && { echo "$i"; return 0; };done;return 1; }
# Default programs definitions
export OPENER=$(find_alt kde-open xdg-open exo-open gnome-open)
export BROWSER=$(find_alt firefox google-chrome chromium chromium-browser qutebrowser "$OPENER")
export BROWSERCLI=$(find_alt w3m links2 links lynx elinks "$OPENER")
export BROWSERTOR=$(find_alt tor-browser-en)
export COMICER=$(find_alt zathura mcomix comix "$OPENER")
export EBOOKER=$(find_alt ebook-viewer "$OPENER")
export EDITOR=$(find_alt nvim vim vi emacs nano leafpad gedit pluma "$OPENER")
export EDITORGUI=$(find_alt geany kate kwrite mousepad leafpad gedit pluma "$OPENER")
export WORDPROCESSOR=$(find_alt wordgrinder "$OPENER")
export FILEMANAGER=$(find_alt dolphin pcmanfm nautilus thunar caja spacefm enlightenment_filemanager "$OPENER")
export FILEMANAGERCLI=$(find_alt ranger vifm mc "$OPENER")
export MUSICER=$(find_alt mpv mplayer mpg123 cvlc "$OPENER")
export PAGER=$(find_alt less more most)
export PLAYER=$(find_alt mpv mplayer ffplay cvlc "$OPENER")
export READER=$(find_alt mupdf zathura evince "$OPENER")
export ROOTER=$(find_alt kdesudo gksudo)
export IMAGEVIEWER=$(find_alt feh ristretto display eog "$OPENER")
export QUEUER=$(find_alt tsp fq ts)
export TERMER=$(find_alt konsole urxvt xterm lxterminal uxterm sakura lxterminal mate-terminal pantheon-terminal gnome-terminal xfce4-terminal terminology terminator "$OPENER")
# TITLE: Configuration functions
cfg-aliasrc() { $EDITORGUI ~/.aliasrc; }
cfg-alsabase() { sudo "$EDITOR" /etc/modprobe.d/alsa-base.conf; }
cfg-abookrc() { $EDITOR ~/.abook/abookrc; }
cfg-addressbook() { $EDITOR ~/.abook/addressbook; }
cfg-autostartrc() { $EDITOR ~/.autostartrc; }
cfg-bashrc() { $EDITORGUI ~/.bashrc; }
cfg-blocklist() { $EDITOR ~/.scripts/blocklist.sh; }
cfg-bookmarks() { $EDITOR ~/.config/surfraw/bookmarks; }
cfg-byobu() { $EDITORGUI ~/.byobu/keybindings.tmux; }
cfg-cava() { $EDITOR ~/.config/cava/config; }
cfg-clonezilla() { sudo "$EDITOR" /etc/drbl/drbl.conf; }
cfg-crda() { sudo "$EDITOR" /etc/default/crda; }
cfg-emacs() { $EDITOR ~/.emacs; }
cfg-emulationstation() { $EDITOR ~/.emulationstation/es_systems.cfg; }
cfg-emulationstation-input() { $EDITOR ~/.emulationstation/es_input.cfg; }
cfg-flexget() { $EDITOR ~/.flexget/config.yml; }
cfg-fstab() { sudo "$EDITOR" /etc/fstab; }
cfg-gitignore() { $EDITOR ~/Public/dotfiles/.gitignore; }
# cfg-greenclip() { killall greenclip ; $EDITOR ~/.config/greenclip.cfg && nohup greenclip daemon > /dev/null 2>&1 & }
cfg-group() { sudo "$EDITOR" /etc/group; }
cfg-grub() { sudo "$EDITOR" /etc/default/grub; }
cfg-hintrc() { $EDITOR ~/.hintrc; }
cfg-hosts() { sudo "$EDITOR" /etc/hosts; }
cfg-hyperterminal() { $EDITOR ~/.hyper.js; }
cfg-intel() { sudo "$EDITOR" /usr/share/X11/xorg.conf.d/20-intel.conf; }
# archive.org downloader https://internetarchive.readthedocs.io/en/latest/
cfg-internetarchive() { $EDITOR ~/.config/ia.ini; }
cfg-inputrc() { $EDITOR ~/.inputrc; }
cfg-i3wm() { $EDITOR ~/.i3/config; }
cfg-keynavrc() { $EDITOR ~/.keynavrc; }
cfg-kodi-keyboard() { $EDITOR ~/.kodi/userdata/keymaps/keyboard.xml; }
cfg-kodi-confluencethumbnailview() { sudo "$EDITOR" /usr/share/kodi/addons/skin.confluence/720p/MyVideoNav.xml; }
cfg-lgogdownloader() { $EDITOR ~/.config/lgogdownloader/config.cfg; }
cfg-livestreamer() { $EDITOR ~/.livestreamerrc; }
cfg-mailcap() { $EDITOR ~/.mailcap; }
cfg-mbsyncrc() { $EDITOR ~/.mbsyncrc; }
cfg-mc() { $EDITOR ~/.config/mc/ini; }
cfg-mc-keymap() { $EDITOR ~/.config/mc/mc.keymap; }
cfg-mcomix() { $EDITOR ~/.config/mcomix/keybindings.conf; }
cfg-megarc() { $EDITOR ~/.megarc; }
cfg-mpd() { $EDITOR ~/.mpd/mpd.conf; }
cfg-mplayer() { $EDITOR ~/.mplayer/config; }
cfg-mpv() { $EDITOR ~/.config/mpv/mpv.conf; }
cfg-mpv-input() { $EDITOR ~/.config/mpv/input.conf; }
cfg-mocp() { $EDITOR ~/.moc/config; }
cfg-muttrc() { $EDITOR ~/.muttrc; }
cfg-nanorc() { $EDITOR ~/.nanorc;}
cfg-nap() { $EDITOR ~/.nap/napconf; }
cfg-ncmpcpp() { $EDITOR ~/.ncmpcpp/config; }
cfg-ncmpcpp-bindings() { $EDITOR ~/.ncmpcpp/bindings; }
cfg-netrc() { $EDITOR ~/.netrc;}
cfg-newsbeuter() { $EDITOR ~/.newsbeuter/config; }
cfg-newsbeuter-queue() { $EDITOR ~/.newsbeuter/queue; }
cfg-newsbeuter-urls() { $EDITOR ~/.newsbeuter/urls; }
cfg-newsboat() { $EDITOR ~/.newsboat/config; }
cfg-newsboat-queue() { $EDITOR ~/.newsboat/queue; }
cfg-newsboat-urls() { $EDITOR ~/.newsboat/urls; }
cfg-nginx-proxy() { sudo "$EDITOR" /etc/nginx/sites-enabled/proxy.conf; }
cfg-nvim() { $EDITOR ~/.config/nvim/init.vim; }
cfg-pastebinit() { $EDITOR ~/.pastebinit.xml; }
cfg-pianobar() { $EDITOR ~/.config/pianobar/config; }
cfg-pianobar-libao() { sudo "$EDITOR" /etc/libao.conf; }
cfg-profile() { $EDITOR ~/.profile; }
cfg-pulseaudio() { sudo "$EDITOR" /etc/pulse/default.pa; }
cfg-pulsedaemon() { sudo "$EDITOR" /etc/pulse/daemon.conf; }
cfg-pyload() { $EDITOR ~/.pyload/pyload.conf; }
cfg-pyradio() { $EDITOR ~/.pyradio/stations.csv; }
cfg-qutebrowser() { $EDITOR ~/.config/qutebrowser/qutebrowser.conf; }
cfg-qutebrowser-keys() { $EDITOR ~/.config/qutebrowser/keys.conf; }
cfg-qutebrowser-quickmarks() { $EDITOR ~/.config/qutebrowser/quickmarks; }
cfg-quicktile() { $EDITOR ~/.config/quicktile.cfg; }
cfg-rofibangs() { $EDITOR ~/.scripts/rofi-scripts-collection/rofi-bangs.sh; }
cfg-ranger() { $EDITOR ~/.config/ranger/rc.conf; }
cfg-ranger-rifle() { $EDITOR ~/.config/ranger/rifle.conf; }
cfg-ranger-commands() { $EDITOR ~/.config/ranger/commands.py; }
cfg-resolve() { sudo "$EDITOR" /etc/resolv.conf; }
cfg-rtv() { $EDITOR ~/.config/rtv/rtv.cfg; }
cfg-samba() { sudo "$EDITOR" /etc/samba/smb.conf; }
cfg-skippyxd() { $EDITOR ~/.skippy-xd.rc; }
cfg-slrnrc() { $EDITOR ~/.slrnrc; }
cfg-ssh-client() { sudo "$EDITOR" /etc/ssh/ssh_config; }
cfg-ssh-daemon() { sudo "$EDITOR" /etc/ssh/sshd_config; }
cfg-sudoers() { sudo "$EDITOR" /etc/sudoers; }
cfg-sakura() { $EDITOR ~/.config/sakura/sakura.conf; }
cfg-surfraw() { $EDITOR ~/.config/surfraw/conf; }
cfg-syncthing() { $EDITORGUI ~/.config/syncthing/config.xml; }
cfg-sysctl() { sudo "$EDITOR" /etc/sysctl.conf; }
cfg-tmuxrc() { $EDITOR ~/.tmux.conf; }
cfg-tor() { sudo "$EDITOR" /etc/tor/torrc; }
cfg-tor-user() { $EDITOR ~/.torrc; }
cfg-torrench() { $EDITOR ~/.config/torrench/config.ini; }
cfg-tpb() { $EDITOR ~/.scripts/tpb.sh; }
cfg-transmission-daemon() { $EDITOR ~/.config/transmission-daemon/settings.json; }
cfg-transmission-ncurse() { $EDITOR ~/.config/transmission-remote-cli/settings.cfg; }
cfg-trz() { $EDITOR ~/.scripts/trz.sh; }
cfg-turses() { $EDITOR ~/.turses/config; }
cfg-urlview() { $EDITOR ~/.urlview; }
cfg-updatedb() { sudo "$EDITOR" /etc/updatedb.conf; }
cfg-vifmrc() { $EDITOR ~/.config/vifm/vifmrc; }
cfg-vimrc() { $EDITOR ~/.vimrc; }
cfg-w3m() { $EDITOR ~/.w3m/config; }
cfg-w3m-keymap() { $EDITOR ~/.w3m/keymap; }
cfg-w3m-urimethodmap() { $EDITOR ~/.w3m/urimethodmap; }
cfg-wegorc() { $EDITOR ~/.wegorc; }
cfg-xbindkeysrc() { $EDITOR ~/.xbindkeysrc && killall xbindkeys ; xbindkeys; }
cfg-xboxdrv() { sudo "$EDITOR" /etc/default/xboxdrv; }
cfg-xmodmap() { $EDITOR ~/.Xmodmap; }
cfg-xresources() { $EDITOR ~/.Xresources; }
cfg-yaourtrc() { $EDITOR ~/.yaourtrc; }
cfg-zathura() { $EDITOR ~/.config/zathura/zathurarc; }
cfg-zshrc() { $EDITOR ~/.zshrc; }
cfg-zurlrc() { $EDITOR ~/.zurlrc; }

# =============================================================================
# === MOVE-LIST-JUMP
# =============================================================================
# TITLE: List functions
# DESC: ls recent items at bottom with green TODAY yellow YESTERDAY
#       substituted with file permissions.
# - https://www.reddit.com/r/archlinux/comments/41s1w4/what_is_your_favorite_one_liner_to_use/cz50y1m
# - http://askubuntu.com/a/152005
lst() {
    ls -vAFqh --color=yes -got --time-style=long-iso "$@" \
    | sed "s/$(date +%Y-%m-%d)/\x1b[32m TODAY\x1b[m/;s/$(date +'%Y-%m-%d' -d yesterday)/\x1b[33m YESTERDAY\x1b[m/" \
    | awk '{k=0;for(i=0;i<=8;i++)k+=((substr($1,i+2,1)~/[rwx]/)*2^(8-i));if(k)printf(" %0o ",k);print}' | tac
}

# @function: list and grep with file permission
lsg() {
    keyword=$(echo "$@" | sed 's/ /.*/g')
    ls -hlA --color=yes \
    | awk '{k=0;for(i=0;i<=8;i++)k+=((substr($1,i+2,1)~/[rwx]/)*2^(8-i));if(k)printf(" %0o ",k);print}' \
    | grep -iE $keyword
}

lsl() {
    ls -hl --color=yes "$@" \
    | awk '{k=0;for(i=0;i<=8;i++)k+=((substr($1,i+2,1)~/[rwx]/)*2^(8-i));if(k)printf(" %0o ",k);print}'
}

# TITLE: Goto and then use list functions
gh() { cd ~ && lst "$@"; }
groot() { cd / && lst; }
getc() { cd /etc/ && lst; }
gme() { cd /media && lst; }
gmu() { cd ~/Music && lst; }
gdo() { cd ~/Documents && lst; }
gdl() { cd ~/Downloads && lst; }
gbo() { cd ~/Books && lst; }
gdr() { cd ~/Dropbox && lst; }
gpi() { cd ~/Pictures && lst; }
gpb() { cd ~/Public && lst; }
gsc() { cd ~/.scripts && lst; }
gwa() { cd ~/Pictures/wallpapers && lst; }
gno() { cd ~/Notes && lst; }
# some more ls aliases (from .bashrc)
alias ll='ls -alhGF'
alias la='ls -A'
alias l='ls -hCF'

# =============================================================================
# === FILE MANAGMENT
# =============================================================================
# TITLE: Quick rename folders and files - one level:
# - https://stackoverflow.com/questions/2709458/how-to-replace-spaces-in-file-names-using-a-bash-script#2709619
alias remove-home-logs='{find ~ -depth -name "*.log" -exec rm -rf \; }'
alias find-home-logs='{find ~ -depth -name "*.log" }'
alias remove-white-space='{find ./ -depth -name "* *" |rename "s/ //g" * \; && lst}'
alias remove-white-chars='rename "s/\s+//g" *' # Remove [ \t\r\n] chars
alias white-to-dash='{find ./ -depth -name "* *" |rename "s/ /-/g" * \; && lst}'
alias white-to-under='{find ./ -depth -name "* *" |rename "s/ /_/g" * \; && lst}'
alias dash-to-under='{find ./ -depth -name "*-*" |rename "s/-/_/g" * \; && lst}'
alias under-to-dash='{find ./ -depth -name "*_*" |rename "s/_/-/g" * \; && lst}'
# Handle multiple layers of files and directories - all levels:
alias remove-all-white='{find ./ -depth -name "* *" -execdir rename "s/ //g" "{}" \; && tree }'
# Note: 'type d' = only folders and 'type f' = only files:
alias under-to-dash-dirs='{find ./ -depth -name "*_*" -type d -execdir rename "s/_/-/g" "{}" \; && tree }'
alias under-to-dash-files='{find ./ -depth -name "*_*" -type f -execdir rename "s/_/-/g" "{}" \; && tree }'
alias dash-to-under-dirs='{find ./ -depth -name "*-*" -type d -execdir rename "s/-/_/g" "{}" \; && tree }'
alias dash-to-under-files='{find ./ -depth -name "*-*" -type f -execdir rename "s/-/_/g" "{}" \; && tree }'

# TITLE: Archive - compression management
extract() {
    if [ -z "$1" ]; then
        echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|exe|deb|tar.bz2|tar.gz|tar.xz>"
    else
        if [ -f "$1" ]; then
            export NAME=${1%.*}
            #mkdir $NAME && cd $NAME
            case "$1" in
                *.tar.bz2)  tar xvjf ./"$1"    ;;
                *.tar.gz)   tar xvzf ./"$1"    ;;
                *.tar.xz)   tar xvJf ./"$1"    ;;
                *.lzma)     unlzma ./"$1"      ;;
                *.bz2)      bunzip2 ./"$1"     ;;
                *.rar)      unrar x -ad ./"$1" ;;
                *.gz)       gunzip ./"$1"      ;;
                *.tar)      tar xvf ./"$1"     ;;
                *.tbz2)     tar xvjf ./"$1"    ;;
                *.tgz)      tar xvzf ./"$1"    ;;
                *.zip)      unzip ./"$1"       ;;
                *.Z)        uncompress ./"$1"  ;;
                *.7z)       7z x ./"$1"        ;;
                *.xz)       unxz ./"$1"        ;;
                *.exe)      cabextract ./"$1"  ;;
                *.deb)      ar x ./"$1"        ;;
                *)          echo "extract: '$1' - unknown archive method" ;;
            esac
        else
            echo "'$1' - file does not exist"
        fi
    fi
}

# =============================================================================
# === PATHS - LANGS - VIRTUAL ENV - PACKAGE MANAGERS
# =============================================================================
# TITLE: Python virtual environment setup
# LINK: https://askubuntu.com/questions/244641/how-to-set-up-and-use-a-virtual-python-environment-in-ubuntu#244642
# DEPS: sudo apt-get install virtualenv virtualenvwrapper python3-pip
# DESC: Python env isolation to avoid global conflicts.
# 1. Setup 'virtualenvwrapper' and a custom virtual env folder.
#    It provides better env handling commands:
#    - Generate an env: 'mkvirtualenv -p /usr/env/python3 py3env'
#    - Activate the env: 'workon py3env'
#    - Deactivate an env: 'deactivate'
#    - Remove the env: 'rmvirtualenv py3env'
# 2. Setup 'pip3'
#    - Avoid using sudo with pip': 'pip3 install --user virtualenvwrapper'
#    - Makes sure that if pip creates an extra virtual environment, it is also
#      placed in our WORKON_HOME directory.
#    - pip3 completion:
#       'pip3 completion --bash >> ~/.profile'
#       'pip3 completion --zsh >> ~/.zshrc'

# 1.
"." /usr/share/virtualenvwrapper/virtualenvwrapper.sh
export WORKON_HOME="$HOME/.virtualenvs"
export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python
# 2.
export PIP_VIRTUALENV_BASE=$WORKON_HOME

# Python Cheat: https://github.com/chrisallenlane/cheat
export CHEATCOLORS=true
alias ch='cheat'

# TITLE: nvm (Node Version Manager) npm and yarn setup
# LINK: https://github.com/creationix/nvm
# DESC: Node env setup.
# - Installation:
# wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# TITLE: npm
alias npmi='npm install --no-optional' # avoid 'fsevents linux' warning
alias npmid='npm install --no-optional --save-dev'

# TITLE: Yarn (set path after nvm)
export PATH="$PATH:$(yarn global bin)"
cfg-yarn-global() { "$EDITOR" /home/"$(whoami)"/.config/yarn/global/package.json; }
alias ya='yarn'
alias yaa='yarn add'
alias yacc='yarn cache clean'
alias yah='yarn help'
alias yao='yarn outdated'
alias yaui='yarn upgrade-interactive'
alias yagl='yarn global list'
alias yaga='yarn global add'
alias yagr='yarn global remove'
alias yagu='yarn global upgrade'
alias yagui='yarn global upgrade-interactive'
# NOTE: Do not edit ~/.yarnrc. Populate it with following global config commands:
alias ycfg='yarn global bin' # output symlinks to executables
alias ycfl='yarn config list' # current configuration
alias ycfgf='yarn set global-folder /home/"$(whoami)"/.yarn/global' # custom folder for global packages
alias ycfpr='yarn config set prefix /home/"$(whoami)"/.yarn' # set global packages installed to ~/.yarn/bin
alias ycfca='yarn config set preferred-cache-folder /home/"$(whoami)"/.yarn/cache' #

# TITLE: Ruby and rbenv.
# NOTE: First remove and purge native Ubuntu Ruby
# export PATH="$HOME/.rbenv/plugins/ruby-build/bin:$PATH"
# export PATH=$HOME/.rbenv/bin:$PATH
# eval "$(rbenv init -)"
# alias rbenv-build-update="cd ~/.rbenv/plugins/ruby-build && git pull && cd -"

# TITLE: Php artisan and composer
export PATH=$HOME/.config/composer/vendor/bin:$PATH
alias art="php artisan"

# TITLE: Erlang and elixir
export PATH=$HOME/usr/local/bin/elixir:$PATH
export ERL_AFLAGS="-kernel shell_history enabled"

# TITLE: Golang and Go Packages
# export GOROOT="/usr/local/go/" # sudo mv go /usr/local
export GOPATH=$HOME/.go # set working dir
export PATH="$PATH:$GOPATH/bin:$PATH" # access go binary system wide.

# TITLE: Custom Path to IntelliJ-IDEA
# export PATH=$HOME/opt/Intellij/idea-UI-172.4155.36/bin:$PATH

# TITLE: External files
if [ -f ~/.hintrc ]; then
    "." ~/.hintrc
fi

# =============================================================================
# === Buku
# =============================================================================
alias bk='buku'
alias bkp='buku -p | more'
alias bka='buku -a'
alias bks='buku --suggest --deep -s'
alias bkS='buku --suggest -S'
alias bkt='buku -t' # Search bookmarks by tags: ,=any +=all, -=exclude
alias bke='buku --export'

# Add firefox last visited url from history to buku
# http://tuxdiary.com/2016/03/26/buku-xsel/
bk-moz-history() {
    sqlite3 /home/"$(whoami)"/.mozilla/firefox/*.default/places.sqlite \
    "select url from moz_places where last_visit_date=(select max(last_visit_date) from moz_places)" | buku -a
}

# =============================================================================
# === Fuzzy Finder
# =============================================================================
# DEMO: https://www.youtube.com/playlist?list=PLqv94xWU9zZ2fMsMMDF4PjtNHCeBFbggD
# DESC: interactive fuzzy string matching
# LINK: https://github.com/junegunn/fzf

fzf-ls() { $(declare -f | awk '/fzf-/ {print $1}' | grep -i fzf | fzf -e -i) ;}

fzf-clipboard() { echo -n "$(greenclip print | fzf -e -i)" | xclip -selection clipboard ;}
fzf-playonlinux() { playonlinux --run "$(ls /home/"$(whoami)"/PlayOnLinux/shortcuts | fzf -e -i )" ;}
fzf-bookmarkscli() { sr "$(cat /home/"$(whoami)"/.config/surfraw/bookmarks | sed '/^$/d' | sed '/^#/d' | sed '/^\//d' | sort -n | fzf -e -i )" ;}
fzf-bookmarks() { surfraw "$(cat /home/"$(whoami)"/.config/surfraw/bookmarks | sed '/^$/d' | sed '/^#/d' | sed '/^\//d' | sort -n | fzf -e -i )" ;}
fzf-bookmarks2clipboard() { echo -n "$(cat /home/"$(whoami)"/.config/surfraw/bookmarks | sed '/^$/d' | sed '/^#/d' | sed '/^\//d' | sort -n | fzf -e -i )" | awk '{print $2}' | xclip -selection clipboard ;}
fzf-bookmarkstor() { surfraw -browser=tor-browser-en "$(cat /home/"$(whoami)"/.config/surfraw/bookmarks | sed '/^$/d' | sed '/^#/d' | sed '/^\//d' | sort -n | fzf -e -i )" ;}
fzf-tor() { torify w3m "$(cat /home/"$(whoami)"/.config/surfraw/bookmarks | awk 'NF != 0 && !/^#/ && /\.onion/' |fzf -e -i | awk '{print $2}')" ;}

fzf-launcher() {
    # note: xdg-open has a bug with .desktop files, so we cant use it
    selected="$(ls /usr/share/applications | fzf -e -i )"
    nohup $(grep '^Exec' "/usr/share/applications/$selected" | tail -1 | sed 's/^Exec=//' | sed 's/%.//') >/dev/null 2>&1&
    # disown if exit 0 successfully
    if [[ $? = 0 ]] ; then disown; fi
}

# https://junegunn.kr/2015/04/browsing-chrome-history-with-fzf/
# https://github.com/junegunn/fzf/wiki/examples#browsing-history
fzf-chromium_history() {
    local cols sep
    cols=$(( COLUMNS / 3 ))
    sep='{::}'
    
    # macos
    # cp -f ~/Library/Application\ Support/Google/Chrome/Default/History /tmp/h
    # linux
    \cp -f ~/.config/chromium/Default/History /tmp/h
    
    sqlite3 -separator $sep /tmp/h \
    "select substr(title, 1, $cols), url
    from urls order by last_visit_time desc" |
    awk -F $sep '{printf "%-'$cols's  \x1b[36m%s\x1b[m\n", $1, $2}' |
    fzf --ansi --multi | sed 's#.*\(https*://\)#\1#' | xargs xdg-open
    # fzf --ansi --multi | sed 's#.*\(https*://\)#\1#' | xargs open
}


fzf-locate() {
    # xdg-open "$(locate "*" | fzf -e -i )"
    # xdg-open "$(locate home media | fzf -e -i )" >/dev/null 2>&1 & disown
    xdg-open "$(locate \
    -d /var/lib/mlocate/mlocate.db \
    -d ~/.updatedb/bingbong.db \
    -d ~/.updatedb/kamui.db \
    -d ~/.updatedb/wiiiso.db \
    home media \
    | fzf -e -i )" >/dev/null 2>&1 & disown
    
    # some programs require a longer time to load
    # sleep 1.5
    
    # if cancle or fail then exit
    # if [ $? -ne 0 ]
    # then
    #   exit
    # fi
}

# http://www.reddit.com/r/commandline/comments/3abtup/fzfr_fzf_bash_function/
fzfr() { fzf -m -x | xargs -d'\n' -r "$@" ; }

# edit single line snippet
cfg-snippetrc() { $EDITOR ~/.snippetrc ;}
cfg-multisnippetrc() { $EDITOR ~/.multisnippet/"$(ls ~/.multisnippet | fzf -e -i)" ;}
multisnippet() { $EDITOR ~/.multisnippet/"$1" ;}
fzf-snippet() {
    selected="$(cat /home/"$(whoami)"/.snippetrc | sed '/^$/d' | sort -n | fzf -e -i )"
    # remove tags, leading and trailing spaces, also no newline
    echo "$selected" | sed -e s/\;\;\.\*\$// | sed 's/^[ \t]*//;s/[ \t]*$//' | tr -d '\n' | xclip -selection clipboard
}

fzf-multisnippet() {
    # location of snippets
    dir=~/.multisnippet
    
    # merge filename and tags into single line
    results=$(for FILE in $dir/*
        do
            getname=$(basename "$FILE")
            gettags=$(head -n 1 "$FILE")
            echo -e "$getname \t $gettags"
    done)
    
    # copy content into clipboard without tags
    filename=$(echo "$(echo $results | fzf -e -i )" | cut -d' ' -f 1)
    sed 1d $dir/$filename | xclip -selection clipboard
}


# =============================================================================
# === COLORS - READABILITY
# =============================================================================
# TITLE: Color the manpages
# DEMO: http://www.youtube.com/watch?v=9BFaLAa428k
# LINK: https://wiki.archlinux.org/index.php/Man_page#Colored_man_pages
man() {
    env LESS_TERMCAP_mb=$'\E[01;31m' \
    LESS_TERMCAP_md=$'\E[01;31m' \
    LESS_TERMCAP_me=$'\E[0m' \
    LESS_TERMCAP_se=$'\E[0m' \
    LESS_TERMCAP_so=$'\E[01;44;33m' \
    LESS_TERMCAP_ue=$'\E[0m' \
    LESS_TERMCAP_us=$'\E[01;32m' \
    man "$@"
}

# TITLE: color common commands (from .bashrc)
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

